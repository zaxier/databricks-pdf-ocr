[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "pdf-parse-claude"
version = "0.1.0"
description = "OCR extraction from PDFs using Databricks Claude endpoint"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing",
]
keywords = ["pdf", "ocr", "claude", "databricks", "text-extraction"]
dependencies = [
    "requests>=2.31.0",
    "PyMuPDF>=1.23.0",
    "Pillow>=10.0.0",
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "types-requests",
]

[project.scripts]
pdf-parse-claude = "pdf_parse_claude.cli:main"

[project.urls]
Homepage = "https://github.com/yourusername/pdf-parse-claude"
Documentation = "https://github.com/yourusername/pdf-parse-claude#readme"
Repository = "https://github.com/yourusername/pdf-parse-claude"
Issues = "https://github.com/yourusername/pdf-parse-claude/issues"

[tool.hatch.build.targets.wheel]
packages = ["src/pdf_parse_claude"]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
filterwarnings = [
    "ignore:builtin type SwigPyPacked has no __module__ attribute:DeprecationWarning",
    "ignore:builtin type SwigPyObject has no __module__ attribute:DeprecationWarning",
    "ignore:builtin type swigvarlink has no __module__ attribute:DeprecationWarning",
]

[tool.coverage.run]
source = ["src/pdf_parse_claude"]
omit = ["tests/*"]

[tool.coverage.report]
precision = 2
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.black]
line-length = 88
target-version = ["py312"]

[tool.ruff]
line-length = 88
target-version = "py312"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = []

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
strict_equality = true
