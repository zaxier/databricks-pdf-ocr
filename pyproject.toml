[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "databricks-pdf-ocr"
version = "0.1.0"
description = "A production-ready Databricks job for processing PDF documents using OCR via Claude AI"
readme = "README.md"
requires-python = ">=3.12,<3.13"
license = {text = "MIT"}
authors = [
    {name = "Your Name", email = "your.email@example.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    "databricks-connect>=16.4.2,<17",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "databricks-sdk>=0.58.0",
    "pymupdf>=1.26.3",
    "dynaconf>=3.2.11",
    "mlflow>=2.0.0",
    "volsync",
]

[dependency-groups]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "types-requests>=2.32.4.20250611",
]

[tool.uv.sources]
volsync = { workspace = true }

[tool.uv.workspace]
members = ["packages/*"]
exclude = ["packages/exclude"]

[project.scripts]
# Run full pipeline
pipeline = "databricks_pdf_ocr.main:main"

# Volsync convenience commands
sync = "databricks_pdf_ocr.sync:main"

# Individual PDF OCR pipeline commands  
autoload = "databricks_pdf_ocr.main:run_ingestion_only"
ocr = "databricks_pdf_ocr.main:run_processing_only"
status = "databricks_pdf_ocr.main:show_status"

[tool.hatch.build.targets.wheel]
packages = ["src/databricks_pdf_ocr"]

[tool.hatch.build.targets.wheel.sources]
"src" = ""

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "I",    # isort
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear
    "UP",   # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
addopts = [
    "-v",
    "--cov=databricks_pdf_ocr",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["src/databricks_pdf_ocr"]
omit = ["*/tests/*", "*/__init__.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
